<!-- GFM-TOC -->
* [1.获取所有部门中当前薪水最高的相关信息](###1.获取所有部门中当前薪水最高的相关信息)
* [2.从titles表获取按照title进行分组](###2.从titles表获取按照title进行分组)
* [3.从titles表获取按照title进行分组，注意对于重复的emp_no进行忽略](###3.从titles表获取按照title进行分组，注意对于重复的emp_no进行忽略。)
* [4.查找employees表](###4.查找employees表)
* [5.统计出当前各个title类型对应的员工当前薪水对应的平均工资](###5.统计出当前各个title类型对应的员工当前薪水对应的平均工资)
<!-- GFM-TOC -->
****
### 1.获取所有部门中当前薪水最高的相关信息
* 题目描述
```sql
CREATE TABLE `dept_emp` (
`emp_no` int(11) NOT NULL,
`dept_no` char(4) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
```
* 输出描述

| dept_no | emp_no | salary |
| :----: | :----: | :----:  |
| d001 | 10001 | 88958 |
| d002 | 10006 | 43311 |
| d003 | 10005 | 94545 |
| d004 | 10004 | 44546 |
| d005 | 10007 | 43466 |
| d006 | 10009 | 55698 |

* 答案解析

````sql
# 连接两张表，限制emp_no相同。限定当前时间to_date='9999-01-01'，分组，max函数计算最大值
select e.dept_no,s.emp_no,max(s.salary) as salary 
from salaries as s inner join dept_emp as e 
on e.emp_no = s.emp_no 
where e.to_date = '9999-01-01' and s.to_date = '9999-01-01'
group by e.dept_no 
order by e.dept_no asc 
````
****
### 2.从titles表获取按照title进行分组
* 题目描述
````sql
# 从titles表获取按照title进行分组,每组个数大于等于2,给出title以及对应的数目t
CREATE TABLE IF NOT EXISTS "titles" (
`emp_no` int(11) NOT NULL,
`title` varchar(50) NOT NULL,
`from_date` date NOT NULL,
`to_date` date DEFAULT NULL);
````
* 输出描述

| title | t |
| :----: | :----: |
| Assistant Engineer | 2 |
| engineer | 4 |
| 省略| 省略 |
| Staff | 3 |

* 答案解析

````sql
# count()和 group by可以统计同意title值的记录条数
select tl.title,count(tl.title) as t from titles as tl 
group by tl.title having t >=2
````


### 3.从titles表获取按照title进行分组，注意对于重复的emp_no进行忽略。
* 题目描述

接第二题条件。从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。
注意对于重复的emp_no进行忽略。

* 输出描述

| title | t |
| :----: | :----: |
| Assistant Engineer | 2 |
| engineer | 4 |
| 省略| 省略 |
| Staff | 3 |

* 答案解析
````sql
# 解法一：
#先用GROUP BY title将表格以title分组，再用COUNT(DISTINCT emp_no)可以统计同一title值且不包含重复emp_no值的记录条数
select title,count(distinct emp_no) as t from titles group by title having t >=2

# 解法二：
# 先对titles表按emp_no进行去重，再分组统计大于或等于2的title
select tl.title,count(tl.title) as t from (select distinct emp_no,title from titles) as tl
group by tl.title having t>=2

````

### 4.查找employees表
* 题目描述
````sql
# 查找employees表所有emp_no为奇数，且last_name不为Mary的员工信息，并按照hire_date逆序排列
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
````
* 输出描述

| emp_no | birth_date | first_name |last_name|gender|hire_date|
| :----: | :----: | :----:  |:----:|:----:|:----:|
| 10011 | 1953-11-07 | 88958 |s|F|1990-01-22|
| 10005 | 1955-01-21 | 43311 |a|M|1989-09-12|
| 10007 | 1957-05-23 | 94545 |d|F|-|
| 10003 | 1959-12-03 | 44546 |f|M|-|
| 10001 | 1953-09-02 | 43466 |g|M|-|
| 10009 | 1952-04-19 | 55698 |w|F|-|
* 答案解析

````sql
# 判断奇数 (a%2=0) 或者 (a&1=1)
select * from employees where emp_no % 2 = 1 and last_name != 'mary' 
order by hire_date desc 
````

### 5.统计出当前各个title类型对应的员工当前薪水对应的平均工资
* 题目描述
````sql
# 统计出当前各个title类型对应的员工当前（to_date='9999-01-01'）薪水对应的平均工资。结果给出title以及平均工资avg。
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
CREATE TABLE IF NOT EXISTS "titles" (
`emp_no` int(11) NOT NULL,
`title` varchar(50) NOT NULL,
`from_date` date NOT NULL,
`to_date` date DEFAULT NULL);
````
* 输出描述

| title | avg |
| :----: | :----: |
|  Engineer | 94409 |
| Senior engineer | 69009 |
| Senior Staff| 91381 |
| Staff | 72527 |
* 答案解析
````sql
select t.title,avg(s.salary) from salaries as s inner join titles as t 
on s.emp_no = t.emp_no
and s.to_date = '9999-01-01'
and t.to_date = '9999-01-01'
group by title
````

### 6.获取当前（to_date='9999-01-01'）薪水第二多的员工的emp_no以及其对应的薪水salary
* 题目描述
````sql
# 获取当前（to_date='9999-01-01'）薪水第二多的员工的emp_no以及其对应的薪水salary
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
````
* 输出描述

| emp_no | salary |
| :----: | :----: |
|  10009 | 94409 |

* 答案解析
````sql
select emp_no,salary from salaries where to_date = '9999-01-01' 
and salary = (select distinct salary from salaries where to_date = '9999-01-01' order by salary desc limit 1,1) 

select emp_no,salary from salaries where to_date = '9999-01-01' 
group by salary 
order by salary desc 
limit 1,1

````

### 7.查找当前薪水排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不准使用order by
* 题目描述
````sql
# 查找当前薪水(to_date='9999-01-01')排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不准使用order by
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
````
* 答案解析
````sql
select e.emp_no,max(s.salary) as salary,e.last_name,e.first_name from employees as e inner join salaries as s 
on e.emp_no = s.emp_no
and s.to_date = '9999-01-01'
and s.salary not in (select max(salary) from salaries where to_date = '9999-01-01')

````

### 8.查找所有员工的name
* 题目描述
````sql
# 查找所有员工的last_name和first_name以及对应的dept_name，也包括暂时没有分配部门的员工
CREATE TABLE `departments` (
`dept_no` char(4) NOT NULL,
`dept_name` varchar(40) NOT NULL,
PRIMARY KEY (`dept_no`));
CREATE TABLE `dept_emp` (
`emp_no` int(11) NOT NULL,
`dept_no` char(4) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`dept_no`));
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
````
* 答案解析
````sql
select em.last_name,em.first_name,dm.dept_name 
from (employees as em left join dept_emp as de on em.emp_no = de.emp_no)
left join departments as dm on de.dept_no = dm.dept_no

````

### 9.查找员工编号emp_no为10001其自入职以来的薪水salary涨幅值growth
* 题目描述
````sql
# 查找员工编号emp_no为10001其自入职以来的薪水salary涨幅值growth
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`))

````
* 答案解析
````sql
select (max(salary)-min(salary)) as growth from salaries where emp_no = '10001'
````

### 10.查找所有员工自入职以来的薪水涨幅情况，
* 题目描述
````sql
查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp_no以及其对应的薪水涨幅growth，并按照growth进行升序
CREATE TABLE `employees` (
`emp_no` int(11) NOT NULL,
`birth_date` date NOT NULL,
`first_name` varchar(14) NOT NULL,
`last_name` varchar(16) NOT NULL,
`gender` char(1) NOT NULL,
`hire_date` date NOT NULL,
PRIMARY KEY (`emp_no`));
CREATE TABLE `salaries` (
`emp_no` int(11) NOT NULL,
`salary` int(11) NOT NULL,
`from_date` date NOT NULL,
`to_date` date NOT NULL,
PRIMARY KEY (`emp_no`,`from_date`));
````
* 答案解析
````sql
SELECT sCurrent.emp_no, (sCurrent.salary-sStart.salary) AS growth
FROM (SELECT s.emp_no, s.salary FROM employees e LEFT JOIN salaries s ON e.emp_no = s.emp_no WHERE s.to_date = '9999-01-01') AS sCurrent
INNER JOIN (SELECT s.emp_no, s.salary FROM employees e LEFT JOIN salaries s ON e.emp_no = s.emp_no WHERE s.from_date = e.hire_date) AS sStart
ON sCurrent.emp_no = sStart.emp_no
ORDER BY growth


````